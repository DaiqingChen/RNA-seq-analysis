res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
treeplot(ego_VIP_Revigo, offset = 0.7, hexpand = .1, label_format = 20)
dev.off()
png("test.treeplot.png",    # create PNG for the heat map
width = 10*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
treeplot(ego_VIP_Revigo, offset = 0.8, hexpand = .1, label_format = 20)
dev.off()
png("test.treeplot.png",    # create PNG for the heat map
width = 10*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
treeplot(ego_VIP_Revigo, offset = 1, hexpand = .1, label_format = 20)
dev.off()
png("test.treeplot.png",    # create PNG for the heat map
width = 10*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
treeplot(ego_VIP_Revigo, offset = 1, hexpand = .15, label_format = 20)
dev.off()
treeplot(ego_VIP_Revigo, offset = 1, hexpand = .15, label_format = 20)
ego_WT_RTvsWT_Cold<-readRDS("/Users/lasia/Desktop/LiaoLab/HawChih/cold RNAseq/GSEA/ego_WT_RTvsWT_Cold.rds")
head(ego_WT_RTvsWT_Cold)
ego_WT_RTvsWT_Cold <- pairwise_termsim(ego_WT_RTvsWT_Cold)
ego_WT_RTvsWT_Cold <- pairwise_termsim(ego_WT_RTvsWT_Cold)
treeplot(ego_WT_RTvsWT_Cold, label_format = 25,fontsize = 4,offset = 3)
Revigo_WT_ColdvsKO_Cold<-c("GO:0001666","GO:0006091","GO:0048738","GO:0062125","GO:0007006","GO:0006839",
"GO:1990845","GO:0006734","GO:0140053","GO:0046034","GO:0035383","GO:0006631",
"GO:0045333","GO:0006790","GO:0072521","GO:0090559","GO:0055021","GO:0010821",
"GO:0046320","GO:0014850","GO:0014823","GO:0006862","GO:0000959","GO:0006390",
"GO:0006103","GO:0017004","GO:0050873","GO:0009117","GO:0046939","GO:0044282",
"GO:0043648","GO:0046394","GO:0034440","GO:0016042","GO:0030258","GO:0009062",
"GO:0016052","GO:0070482","GO:0008637")
ego_WT_ColdvsKO_Cold.de_Revigo <- filter(ego_WT_ColdvsKO_Cold, ID %in% Revigo_WT_ColdvsKO_Cold)
ego_WT_ColdvsKO_Cold.de<-readRDS("/Users/lasia/Desktop/LiaoLab/HawChih/cold RNAseq/GSEA/ego_WT_ColdvsKO_Cold.de.rds")
Revigo_WT_ColdvsKO_Cold<-c("GO:0001666","GO:0006091","GO:0048738","GO:0062125","GO:0007006","GO:0006839",
"GO:1990845","GO:0006734","GO:0140053","GO:0046034","GO:0035383","GO:0006631",
"GO:0045333","GO:0006790","GO:0072521","GO:0090559","GO:0055021","GO:0010821",
"GO:0046320","GO:0014850","GO:0014823","GO:0006862","GO:0000959","GO:0006390",
"GO:0006103","GO:0017004","GO:0050873","GO:0009117","GO:0046939","GO:0044282",
"GO:0043648","GO:0046394","GO:0034440","GO:0016042","GO:0030258","GO:0009062",
"GO:0016052","GO:0070482","GO:0008637")
ego_WT_ColdvsKO_Cold.de_Revigo <- filter(ego_WT_ColdvsKO_Cold.de, ID %in% Revigo_WT_ColdvsKO_Cold)
ego_WT_ColdvsKO_Cold.de_Revigo <- pairwise_termsim(ego_WT_ColdvsKO_Cold.de_Revigo)
barplot(ego_WT_ColdvsKO_Cold.de_Revigo, showCategory = 39)
treeplot(ego_WT_ColdvsKO_Cold.de_Revigo, label_format = 25,fontsize = 4,offset = 3)
####################### Treeplot parameters ################
png("New.GO in WT_ColdvsKO_Cold.png",    # create PNG for the heat map
width = 10*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
treeplot(ego_WT_ColdvsKO_Cold.de_Revigo, offset = 1, hexpand = .15, label_format = 20)
dev.off()
View(BATvsBAT_Cold)
View(BATvsBAT_Cold)
# get rid of genes without name
BATvsBAT_Cold.<-BATvsBAT_Cold[!is.na(BATvsBAT_Cold$ENTREZID)]
# get rid of genes without name
BATvsBAT_Cold.<-BATvsBAT_Cold[!is.na(BATvsBAT_Cold$ENTREZID),]
View(BATvsBAT_Cold.)
BATvsBAT_Cold. <- topTreat(efit, coef=1, n=Inf)
WATvsWAT_Cold. <- topTreat(efit, coef=2, n=Inf)
WATvsBAT. <- topTreat(efit, coef=3, n=Inf)
WAT_ColdvsBAT_Cold. <- topTreat(efit, coef=4, n=Inf)
# get rid of genes without name
BATvsBAT_Cold <- BATvsBAT_Cold.[!is.na(BATvsBAT_Cold.$ENTREZID),]
WATvsWAT_Cold <- WATvsWAT_Cold.[!is.na(WATvsWAT_Cold.$ENTREZID),]
WATvsBAT <- WATvsBAT.[!is.na(WATvsBAT.$ENTREZID),]
WAT_ColdvsBAT_Cold <- WAT_ColdvsBAT_Cold.[!is.na(WAT_ColdvsBAT_Cold.$ENTREZID),]
# Create new categorical column ------------------------------------------------
BATvsBAT_Cold <- BATvsBAT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WATvsWAT_Cold <- WATvsWAT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WATvsBAT <- WATvsBAT %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WAT_ColdvsBAT_Cold <- WAT_ColdvsBAT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
# Obtain gene_type counts ------------------------------------------------------
BATvsBAT_Cold %>% count(gene_type)
WATvsWAT_Cold %>% count(gene_type)
WATvsBAT %>% count(gene_type)
WAT_ColdvsBAT_Cold %>% count(gene_type)
pBATvsBAT_Cold <- ggplot(data=BATvsBAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
pWATvsWAT_Cold <- ggplot(data=WATvsWAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
pWATvsBAT <- ggplot(data=WATvsBAT, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
pWAT_ColdvsBAT_Cold <- ggplot(data=WAT_ColdvsBAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
cowplot::plot_grid(pBATvsBAT_Cold, pWATvsWAT_Cold, pWATvsBAT, pWAT_ColdvsBAT_Cold, ncol=2, labels=LETTERS[1:4])
View(WATvsBAT)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
library(RCy3)
R.version.string
R.version.string
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
?updateR
updateR(admin_password = "os_admin_user_password")
updateR()
version
R.version.string
packageStatus()
viewPathway("PINK1-PRKN Mediated Mitophagy",  organism="mouse",
readable = TRUE,
foldChange = WT_RTvsWT_Cold_list)
library(clusterProfiler)
library(enrichplot)
library(ReactomePA)
## attach the annotation package
library(org.Mm.eg.db)
library('biomaRt')
library(tidyverse)
viewPathway("PINK1-PRKN Mediated Mitophagy",  organism="mouse",
readable = TRUE,
foldChange = WT_RTvsWT_Cold_list)
library(limma)
library(edgeR)
library(Glimma)
library(gplots)
setwd("/Users/lasia/Desktop/LiaoLab/HawChih/cold RNAseq/mitoGene_qPCR")
df <- read.csv("data_for_de_genes.csv")
df<-df[,-1]
countdata <- df[,c(2:17)]
countdata <- matrix(as.numeric(unlist(countdata)),nrow=83,ncol=16)
rownames(countdata) <- df[,1]
colnames(countdata) <- colnames(df[,2:17])
## Convert to an edgeR object
dgeObj <- DGEList(countdata)
group <-c(rep("WT_RT",4),rep("KO_RT",4),rep("WT_Cold",4),rep("KO_Cold",4))
dgeObj$samples$group <- group
dgeObj$samples$group
design <- model.matrix(~ 0+group)
rownames(design) <- colnames(dgeObj$counts)
design
contr.matrix <- makeContrasts(
WTvsWT_Cold = groupWT_Cold - groupWT_RT,
WT_ColdvsKO_Cold = groupKO_Cold - groupWT_Cold,
WTvsKO = groupKO_RT - groupWT_RT,
KOvsKO_Cold = groupKO_Cold - groupKO_RT,
levels = colnames(design))
contr.matrix
## take log of it
# countdata<-log(countdata+0.0000000000001) #not working well,changed the pattern
countdata<-log(countdata)
#### Fit in linear model to see the difference between groups
fit <- lmFit(countdata, design)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
efit <- eBayes(fit)
#### plot the mean over variance to see the trend of data
plotSA(efit,main=" Mean-variance trend")
#### see the summary of how genes are expressed in four groups
dt <- decideTests(efit)
summary(dt)
# we can see that there are not much difference between VEGF and non-VEGF, big differences between control and knockdown groups
WT_RTvsWT_Cold <- topTable(efit,coef=1,number = Inf)
WT_ColdvsKO_Cold <- topTreat(efit,coef=2,number = Inf)
WT_RTvsKO_RT<-topTreat(efit,coef=3,number=Inf)
KO_RTvsKO_Cold<-topTreat(efit,coef=4,number=Inf)
library(clusterProfiler)
library(enrichplot)
library(ReactomePA)
## attach the annotation package
library(org.Mm.eg.db)
library('biomaRt')
library(tidyverse)
WT_RTvsWT_Cold<-read.csv("/Users/lasia/Desktop/LiaoLab/HawChih/cold RNAseq/mitoGene_qPCR/WT_RTvsKO_RT.csv")
colnames(WT_RTvsWT_Cold)[2]<-"Symbol"
WT_RTvsWT_Cold <- WT_RTvsWT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
View(WT_RTvsWT_Cold)
WT_RTvsWT_Cold$Symbol<-rownames(WT_RTvsWT_Cold)
WT_ColdvsKO_Cold$Symbol<-rownames(WT_ColdvsKO_Cold)
WT_RTvsKO_RT$Symbol<-rownames(WT_RTvsKO_RT)
KO_RTvsKO_Cold$Symbol<-rownames(KO_RTvsKO_Cold)
WT_RTvsWT_Cold <- topTable(efit,coef=1,number = Inf)
WT_ColdvsKO_Cold <- topTreat(efit,coef=2,number = Inf)
WT_RTvsKO_RT<-topTreat(efit,coef=3,number=Inf)
KO_RTvsKO_Cold<-topTreat(efit,coef=4,number=Inf)
WT_RTvsWT_Cold$Symbol<-rownames(WT_RTvsWT_Cold)
WT_ColdvsKO_Cold$Symbol<-rownames(WT_ColdvsKO_Cold)
WT_RTvsKO_RT$Symbol<-rownames(WT_RTvsKO_RT)
KO_RTvsKO_Cold$Symbol<-rownames(KO_RTvsKO_Cold)
# Create new categorical column ------------------------------------------------
WT_RTvsWT_Cold <- WT_RTvsWT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WT_ColdvsKO_Cold <- WT_ColdvsKO_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WT_RTvsKO_RT <- WT_RTvsKO_RT %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
KO_RTvsKO_Cold <- KO_RTvsKO_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
# Obtain gene_type counts ------------------------------------------------------
WT_RTvsWT_Cold %>%
count(gene_type)
WT_ColdvsKO_Cold %>%
count(gene_type)
WT_RTvsKO_RT %>%
count(gene_type)
KO_RTvsKO_Cold %>%
count(gene_type)
# Add colour, size and alpha (transparency) to volcano plot --------------------
cols <- c("up" = "red", "down" = "blue", "ns" = "black") ##ffad73 #26b3ff
## cluster profiler
WT_RTvsWT_Cold_de <- WT_RTvsWT_Cold[WT_RTvsWT_Cold$gene_type !="ns",]
WT_RTvsWT_Cold_ID <- bitr(WT_RTvsWT_Cold_de$Symbol, fromType = "SYMBOL",
toType = c("ENSEMBL", "ENTREZID"),
OrgDb = org.Mm.eg.db)
## 81 out of 83 are mapped in this way
WT_RTvsWT_Cold_ID_2<-left_join(WT_RTvsWT_Cold_de,WT_RTvsWT_Cold_ID, by=c("Symbol"="SYMBOL"))
WT_RTvsWT_Cold_ID_2<-WT_RTvsWT_Cold_ID_2[,c(10,7,1)]
WT_RTvsWT_Cold_ID_2<-WT_RTvsWT_Cold_ID_2[order(WT_RTvsWT_Cold_ID_2$logFC,decreasing = TRUE),]
WT_RTvsWT_Cold_list <- as.numeric(WT_RTvsWT_Cold_ID_2$logFC)
rnames<-WT_RTvsWT_Cold_ID_2$ENTREZID
names(WT_RTvsWT_Cold_list)<-rnames
#reactome pathway
epa_WT_RTvsWT_Cold <- enrichPathway(gene=WT_RTvsWT_Cold_ID_2$ENTREZID, organism="mouse", pvalueCutoff = 0.05, readable=TRUE)
head(epa_WT_RTvsWT_Cold)
viewPathway("PINK1-PRKN Mediated Mitophagy",  organism="mouse",
readable = TRUE,
foldChange = WT_RTvsWT_Cold_list)
# KEGG pathway
ek_WT_RTvsWT_Cold <- enrichKEGG(gene = WT_RTvsWT_Cold_ID$ENTREZID,
organism     = 'mmu',
pvalueCutoff = 1)
# KEGG pathway
ek_WT_RTvsWT_Cold <- enrichKEGG(gene = WT_RTvsWT_Cold_ID_2$ENTREZID,
organism     = 'mmu',
pvalueCutoff = 1)
head(ek_WT_RTvsWT_Cold)
library("pathview")
BiocManager::install("pathview")
library(pathview)
mmu03320 <- pathview(gene.data  = WT_RTvsWT_Cold_list,
pathway.id = "mmu03320",
species    = "mmu",
limit      = list(gene=max(abs(WT_RTvsWT_Cold_list)), cpd=1))
mmu04714 <- pathview(gene.data  = WT_RTvsWT_Cold_list,
pathway.id = "mmu04714",
species    = "mmu",
limit      = list(gene=max(abs(WT_RTvsWT_Cold_list)), cpd=1))
ek_WT_RTvsWT_Cold <- setReadable(ek_WT_RTvsWT_Cold, 'org.Mm.eg.db', 'ENTREZID')
cnetplot(ek_WT_RTvsWT_Cold, foldChange=WT_RTvsWT_Cold_list, colorEdge = TRUE)
library(clusterProfiler)
library(enrichplot)
library(ReactomePA)
## attach the annotation package
library(org.Mm.eg.db)
library('biomaRt')
library(tidyverse)
library(pathview)
ek_WT_RTvsWT_Cold <- setReadable(ek_WT_RTvsWT_Cold, 'org.Mm.eg.db', 'ENTREZID')
cnetplot(ek_WT_RTvsWT_Cold, foldChange=WT_RTvsWT_Cold_list, colorEdge = TRUE)
install.packages("ggnewscale")
ek_WT_RTvsWT_Cold <- setReadable(ek_WT_RTvsWT_Cold, 'org.Mm.eg.db', 'ENTREZID')
cnetplot(ek_WT_RTvsWT_Cold, foldChange=WT_RTvsWT_Cold_list, colorEdge = TRUE)
p1 <- heatplot(ek_WT_RTvsWT_Cold, showCategory=5)
p2 <- heatplot(ek_WT_RTvsWT_Cold,foldChange=WT_RTvsWT_Cold_list, showCategory=5)
cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
#heatplot(ek_WT_RTvsWT_Cold, showCategory=5)
KO_RTvsKO_Cold_ID <- bitr(KO_RTvsKO_Cold[KO_RTvsKO_Cold$gene_type!="ns",]$Symbol, fromType = "SYMBOL",
toType = c("ENSEMBL", "ENTREZID"),
OrgDb = org.Mm.eg.db)
KO_RTvsKO_Cold2<- KO_RTvsKO_Cold[KO_RTvsKO_Cold$Symbol %in% KO_RTvsKO_Cold_ID$SYMBOL,]
KO_RTvsKO_Cold_ID_2<-cbind(KO_RTvsKO_Cold_ID,KO_RTvsKO_Cold2,by=c("Symbol"="SYMBOL"))
KO_RTvsKO_Cold_2<-KO_RTvsKO_Cold_ID_2[,c(2:5)]
KO_RTvsKO_Cold_ID_2<-KO_RTvsKO_Cold_ID_2[order(KO_RTvsKO_Cold_ID_2$logFC,decreasing = TRUE),]
KO_RTvsKO_Cold_list <- as.numeric(KO_RTvsKO_Cold_ID_2$logFC)
rnames<-KO_RTvsKO_Cold_ID_2$ENTREZID
names(KO_RTvsKO_Cold_list)<-rnames
# KEGG pathway
ek_KO_RTvsKO_Cold <- enrichKEGG(gene = KO_RTvsKO_Cold_ID$ENTREZID,
organism     = 'mmu',
pvalueCutoff = 1)
head(ek_KO_RTvsKO_Cold)
heatplot(ek_KO_RTvsKO_Cold,foldChange=KO_RTvsKO_Cold_list, showCategory=5)
View(KO_RTvsKO_Cold_ID)
ek_KO_RTvsKO_Cold <- setReadable(ek_KO_RTvsKO_Cold, 'org.Mm.eg.db', 'ENTREZID')
heatplot(ek_KO_RTvsKO_Cold,foldChange=KO_RTvsKO_Cold_list, showCategory=5)
png("KO_RTvsKO_Cold_KEGG.png",
width = 8*400,
height = 8*400,
res = 400,
pointsize = 5)
heatplot(ek_KO_RTvsKO_Cold,foldChange=KO_RTvsKO_Cold_list, showCategory=5)
dev.off()
png("KO_RTvsKO_Cold_KEGG.png",
width = 5*400,
height = 5*400,
res = 400,
pointsize = 5)
heatplot(ek_KO_RTvsKO_Cold,foldChange=KO_RTvsKO_Cold_list, showCategory=5)
dev.off()
## cluster profiler
#WT_RTvsWT_Cold_de <- WT_RTvsWT_Cold[WT_RTvsWT_Cold$gene_type !="ns",]
WT_RTvsWT_Cold_ID <- bitr(WT_RTvsWT_Cold$Symbol, fromType = "SYMBOL",
toType = c("ENSEMBL", "ENTREZID"),
OrgDb = org.Mm.eg.db)
## 81 out of 83 are mapped in this way
## 39 de genes
WT_RTvsWT_Cold_ID_2<-left_join(WT_RTvsWT_Cold,WT_RTvsWT_Cold_ID, by=c("Symbol"="SYMBOL"))
WT_RTvsWT_Cold_ID_2<-WT_RTvsWT_Cold_ID_2[,c(10,7,1)]
WT_RTvsWT_Cold_ID_2<-WT_RTvsWT_Cold_ID_2[order(WT_RTvsWT_Cold_ID_2$logFC,decreasing = TRUE),]
WT_RTvsWT_Cold_list <- as.numeric(WT_RTvsWT_Cold_ID_2$logFC)
rnames<-WT_RTvsWT_Cold_ID_2$ENTREZID
names(WT_RTvsWT_Cold_list)<-rnames
# KEGG pathway
ek_WT_RTvsWT_Cold <- enrichKEGG(gene = WT_RTvsWT_Cold_ID_2$ENTREZID,
organism     = 'mmu',
pvalueCutoff = 1)
head(ek_WT_RTvsWT_Cold)
p1 <- heatplot(ek_WT_RTvsWT_Cold, showCategory=5)
p2 <- heatplot(ek_WT_RTvsWT_Cold,foldChange=WT_RTvsWT_Cold_list, showCategory=5)
cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
ek_WT_RTvsWT_Cold <- setReadable(ek_WT_RTvsWT_Cold, 'org.Mm.eg.db', 'ENTREZID')
p1 <- heatplot(ek_WT_RTvsWT_Cold, showCategory=5)
p2 <- heatplot(ek_WT_RTvsWT_Cold,foldChange=WT_RTvsWT_Cold_list, showCategory=5)
cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
mmu04714 <- pathview(gene.data  = WT_RTvsWT_Cold_list,
pathway.id = "mmu04714",
species    = "mmu",
limit      = list(gene=max(abs(WT_RTvsWT_Cold_list)), cpd=1))
mmu03320 <- pathview(gene.data  = WT_RTvsWT_Cold_list,
pathway.id = "mmu03320",
species    = "mmu",
limit      = list(gene=max(abs(WT_RTvsWT_Cold_list)), cpd=1))
#reactome pathway
epa_WT_RTvsWT_Cold <- enrichPathway(gene=WT_RTvsWT_Cold_ID_2$ENTREZID, organism="mouse", pvalueCutoff = 0.05, readable=TRUE)
head(epa_WT_RTvsWT_Cold)
ek_WT_RTvsWT_Cold <- setReadable(ek_WT_RTvsWT_Cold, 'org.Mm.eg.db', 'ENTREZID')
cnetplot(ek_WT_RTvsWT_Cold, foldChange=WT_RTvsWT_Cold_list, colorEdge = TRUE)
citation("pathview")
###### import packages ####
library(ggplot2)
library(ggrepel)
library(tidyr)
library(dplyr)
########### Volcano plot #######
## Add colour, size and alpha (transparency) to volcano plot
cols <- c("up" = "red", "down" = "blue", "ns" = "black") ##ffad73 #26b3ff
## plot by ggplot
pBATvsBAT_Cold <- ggplot(data=BATvsBAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
pWATvsWAT_Cold <- ggplot(data=WATvsWAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
######### Read in data #############
setwd("/Users/lasia/Documents/Cold study") # set working direction
raw_data<-read.table("GSE112582_raw_count.txt") # read in raw_data
raw_data<-read.table("data_raw/GSE112582_raw_count.txt") # read in raw_data
######## Set the data into matrix format ###########
df<-matrix(as.numeric(unlist(raw_data[-1,c(2:17)])),nrow=46078,ncol=16)
rownames(df) <- raw_data[-1,1] # set the names of rows(gene name)
colnames(df) <- raw_data[1,-1] # set the names of cols(sample group)
df<-df[,c(5,6,1,2,7,8,3,4,13:16,9:12)] # re-order the columns
###### Import the packages ###########
library(limma)
library(edgeR)
library(Glimma)
###### Set as an edgeR object #########
dgeObj <- DGEList(df) # Creates a DGEList object
group <-c(rep("BAT",4),rep("BAT_Cold",4),rep("WAT",4),rep("WAT_Cold",4)) # annotate the group
dgeObj$samples$group <- group # set the group in our object
######### Remove low count rows by package default setting ########
keep.exprs <- filterByExpr(dgeObj, group=group) # Identify genes to remove by filterByExpr function of edgeR
dgeObj <- dgeObj[keep.exprs,, keep.lib.sizes=FALSE] # keep the ones we filtered
dim(dgeObj) # look at how many rows left
dgeObj$samples$lib.size # library size left in each column
head(dgeObj$counts) # take a look of what left
BiocManager::install("org.Mm.eg.db")
library("org.Mm.eg.db")
geneList <- select(org.Mm.eg.db,
keys = c(rownames(dgeObj$counts)),
columns = c("ENTREZID", "SYMBOL","GENENAME"),
keytype = "ENSEMBL") # ENSEMBL
dgeObj$genes <- geneList # assign the gene names to our object
dgeObj # take a look at each categories in our object
########## Normalize ##############
dgeObj<-calcNormFactors(dgeObj,method="TMM") # type ?calcNormFactors to see the mthod available
normalized_count<-data.frame(dgeObj$counts) # keep the normalized count as a data frame
write.csv(normalized_count,"data_clean/normalized_count.csv") # write to file
######### Take a look of how our data grouped ####
plotMDS(dgeObj$counts,col=rep(1:4, each=4)) # 4 colors for 4 groups
######### Set design matrix ######
design <- model.matrix(~ 0+group)
######### Take a look of how our data grouped ####
plotMDS(dgeObj$counts,col=rep(1:4, each=4)) # 4 colors for 4 groups
######### Set design matrix ######
design <- model.matrix(~ 0+group)
rownames(design) <- colnames(dgeObj$counts)
design
######## Set contract matrix ####
contr.matrix <- makeContrasts(
BATvsBAT_Cold = groupBAT_Cold - groupBAT,
WATvsWAT_Cold = groupWAT_Cold - groupWAT,
WATvsBAT = groupBAT-groupWAT,
WAT_ColdvsBAT_Cold = groupBAT_Cold - groupWAT_Cold,
levels = colnames(design))
contr.matrix
######## Estimating the dispersion ######
# Removing heteroscedascity from count data
# The common dispersion estimates the overall BCV of the dataset, averaged over all genes:
dgeObj <- estimateDisp(dgeObj,design = design)
plotBCV(dgeObj) # Plot the BCV
v <- voom(dgeObj, design, plot=TRUE) # look at the mean-variance trend
####### Fit into model ##########
vfit <- lmFit(v, design) # fit into lm model
vfit <- contrasts.fit(vfit, contrasts=contr.matrix) # by our design and contract matrix
efit <- eBayes(vfit) # fit ebayes model for better outcome
plotSA(efit)
####### Look at how many deGenes we got ####
de <- decideTests(efit)
summary(de) # the criteria is 5% FDR
tfit <- treat(efit, lfc=2) # change the criteria of significance to logFC=2
dt <- decideTests(tfit)
summary(dt)
###### import packages ####
library(ggplot2)
library(ggrepel)
library(tidyr)
library(dplyr)
###### Write our analysis result of each comparison into data frame ####
##### not using any criteria yet ####
##### n = Inf to keep all the genes in each comparison
BATvsBAT_Cold. <- topTreat(efit, coef=1, n=Inf)
WATvsWAT_Cold. <- topTreat(efit, coef=2, n=Inf)
WATvsBAT. <- topTreat(efit, coef=3, n=Inf)
WAT_ColdvsBAT_Cold. <- topTreat(efit, coef=4, n=Inf)
## There are some genes didn't get annotated earlier
## get rid of genes without name, not useful for our interpretation
BATvsBAT_Cold <- BATvsBAT_Cold.[!is.na(BATvsBAT_Cold.$ENTREZID),]
WATvsWAT_Cold <- WATvsWAT_Cold.[!is.na(WATvsWAT_Cold.$ENTREZID),]
WATvsBAT <- WATvsBAT.[!is.na(WATvsBAT.$ENTREZID),]
WAT_ColdvsBAT_Cold <- WAT_ColdvsBAT_Cold.[!is.na(WAT_ColdvsBAT_Cold.$ENTREZID),]
## Label genes based on our predered criteria
## Here I used logFC >1 and adj.P-value < 0.05 as differential expressed
BATvsBAT_Cold <- BATvsBAT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WATvsWAT_Cold <- WATvsWAT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WATvsBAT <- WATvsBAT %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
WAT_ColdvsBAT_Cold <- WAT_ColdvsBAT_Cold %>%
mutate(gene_type = case_when(logFC > 1 & adj.P.Val <= 0.05 ~ "up",
logFC < -1 & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
## cout how many dfGenes we have in each comparison
BATvsBAT_Cold %>% count(gene_type)
WATvsWAT_Cold %>% count(gene_type)
WATvsBAT %>% count(gene_type)
WAT_ColdvsBAT_Cold %>% count(gene_type)
########### Volcano plot #######
## Add colour, size and alpha (transparency) to volcano plot
cols <- c("up" = "red", "down" = "blue", "ns" = "black") ##ffad73 #26b3ff
## plot by ggplot
pBATvsBAT_Cold <- ggplot(data=BATvsBAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
pWATvsWAT_Cold <- ggplot(data=WATvsWAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
pWATvsBAT <- ggplot(data=WATvsBAT, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
pWAT_ColdvsBAT_Cold <- ggplot(data=WAT_ColdvsBAT_Cold, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = gene_type),size = 0.5) + scale_colour_manual(values = cols) + geom_vline(xintercept=c(-0.58, 0.58), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.05), col="red",linetype = "dashed")
cowplot::plot_grid(pBATvsBAT_Cold, pWATvsWAT_Cold, pWATvsBAT, pWAT_ColdvsBAT_Cold, ncol=2, labels=LETTERS[1:4])
cowplot::plot_grid(pBATvsBAT_Cold, pWATvsWAT_Cold, pWATvsBAT, pWAT_ColdvsBAT_Cold, ncol=2, labels=LETTERS[1:4])
######### Read in data #############
setwd("/Users/lasia/Documents/RNA-seq-analysis") # set working direction
raw_data<-read.table("data_raw/GSE112582_raw_count.txt") # read in raw_data
